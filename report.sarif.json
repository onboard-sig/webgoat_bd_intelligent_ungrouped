{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
    "runs": [
        {
            "tool": {
                "driver": {
                    "name": "Black Duck SCA (Intelligent)",
                    "version": "10.7.0",
                    "organization": "Black Duck",
                    "rules": [
                        {
                            "id": "CVE-2013-7285 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2013-7285 BDSA-2013-0046)"
                            },
                            "fullDescription": {
                                "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2013-0046](https://openhub.net/vulnerabilities/bdsa/BDSA-2013-0046)([CVE-2013-7285](https://nvd.nist.gov/vuln/detail/CVE-2013-7285)) - Xstream Vulnerable to Remote Code Execution (RCE) via Specially Crafted Input Stream\n\n\n## Solution\nFixed in version [**1.4.7**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_7) by [this](https://github.com/x-stream/xstream/commit/94666ae6dfe839410c73bdfeeb211374f04a2059) commit.\n\n## Workaround\nThe vendor supplies the following workaround:\n\n\"Users can register an own converter for dynamic proxies, the java.beans.EventHandler type or for the java.lang.ProcessBuilder type, that also protects against an attack for this special case:\n```\nxstream.registerConverter(new Converter() {\n  public boolean canConvert(Class type) {\n    return type != null && (type == java.beans.EventHandler || type == java.lang.ProcessBuilder || Proxy.isProxy(type));\n  }\n\n  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n    throw new ConversionException(\"Unsupported type due to security reasons.\");\n  }\n\n  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n    throw new ConversionException(\"Unsupported type due to security reasons.\");\n  }\n}, XStream.PRIORITY_LOW);\n```\n\"\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2020-26217 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2020-26217 BDSA-2020-3372)"
                            },
                            "fullDescription": {
                                "text": "Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2020-3372](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3372)([CVE-2020-26217](https://nvd.nist.gov/vuln/detail/CVE-2020-26217)) - Xstream Vulnerable to Remote Code Execution (RCE) via Incomplete Blacklist for Unmarshalling Specially Crafted Input\n\n\n## Solution\nFixed in **[1.4.14](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_14)** by [this](https://github.com/x-stream/xstream/commit/0fec095d534126931c99fd38e9c6d41f5c685c1a) commit.\n\nThe latest stable releases are available [here](https://github.com/x-stream/xstream/releases/).\n\n## Workaround\nThe vendor has supplied the following workarounds if you rely on the blacklisting feature and are unable to upgrade to **1.4.14**.\n\nFor version **1.4.13**\nAdd two lines to XStream's setup code:\n> \n> ```\n> xstream.denyTypes(new String[]{ \"javax.imageio.ImageIO$ContainsFilter\" });\n> xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });\n> ```\n>\nFor versions **1.4.7** to **1.4.12** deny at least the following types: javax.imageio.ImageIO$ContainsFilter, java.beans.EventHandler, java.lang.ProcessBuilder, java.lang.Void and void.\n>```\n> xstream.denyTypes(new String[]{ \"javax.imageio.ImageIO$ContainsFilter\" });\n> xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });\n> ```\n\nFor versions **1.4.6** or below, register a converter to prevent the unmarshalling of the currently know critical types of the Java runtime.\n> ```\n> xstream.registerConverter(new Converter() {\n>   public boolean canConvert(Class type) {\n>     return type != null && (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class || type == java.lang.Void.class || void.class || type.getName().equals(\"javax.imageio.ImageIO$ContainsFilter\") || Proxy.isProxy(type));\n>   }\n> \n>   public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n>     throw new ConversionException(\"Unsupported type due to security reasons.\");\n>   }\n> \n>   public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n>     throw new ConversionException(\"Unsupported type due to security reasons.\");\n>   }\n> }, XStream.PRIORITY_LOW);\n> ```\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39148 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39148 BDSA-2021-2603)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2603](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2603)([CVE-2021-39148](https://nvd.nist.gov/vuln/detail/CVE-2021-39148)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'javax.naming.Binding' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39145 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39145 BDSA-2021-2590)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2590](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2590)([CVE-2021-39145](https://nvd.nist.gov/vuln/detail/CVE-2021-39145)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'com.sun.org.apache.xpath.internal.objects.XString' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39147 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39147 BDSA-2021-2602)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2602](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2602)([CVE-2021-39147](https://nvd.nist.gov/vuln/detail/CVE-2021-39147)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'javax.naming.CompoundName' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39139 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39139 BDSA-2021-2581)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2581](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2581)([CVE-2021-39139](https://nvd.nist.gov/vuln/detail/CVE-2021-39139)) - XStream Vulnerable to Remote Code Execution (RCE) via Incomplete Deserialization Blacklist of 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39144 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39144 BDSA-2021-2569)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2569](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2569)([CVE-2021-39144](https://nvd.nist.gov/vuln/detail/CVE-2021-39144)) - XStream Vulnerable to Arbitrary Command Execution via Incomplete Deserialization Blacklist of 'sun.tracing.*' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39146 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39146 BDSA-2021-2593)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2593](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2593)([CVE-2021-39146](https://nvd.nist.gov/vuln/detail/CVE-2021-39146)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'javax.swing.MultiUIDefaults' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39154 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39154 BDSA-2021-2573)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2573](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2573)([CVE-2021-39154](https://nvd.nist.gov/vuln/detail/CVE-2021-39154)) - XStream Vulnerable to Remote Code Execution (RCE) via Incomplete Deserialization Blacklist\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39141 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39141 BDSA-2021-2580)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2580](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2580)([CVE-2021-39141](https://nvd.nist.gov/vuln/detail/CVE-2021-39141)) - XStream Vulnerable to Remote Code Execution (RCE) via Incomplete Deserialization Blacklist of 'com.sun.xml.internal.ws.spi.*' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "properties": {
                                "security-severity": "9.1",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2020-26259 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2020-26259 BDSA-2020-3780)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-3780](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3780)([CVE-2020-26259](https://nvd.nist.gov/vuln/detail/CVE-2020-26259)) - XStream Vulnerable to Arbitrary File Deletion via Unmarshalling of Specially Crafted Input\n\n\n## Solution\nFixed in [**1.4.15**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_15) by [this](https://github.com/x-stream/xstream/commit/0bcbf50126a62dfcd65f93a0da0c6d1ae92aa738) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers who configured the white listing approach of the Security Framework, without the affected classes on the whitelist, are not vulnerable.\n\nFor users of the blacklisting approach of the security framework, the vendor supplies a comprehensive workaround [here](https://x-stream.github.io/CVE-2020-26259.html).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21344 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21344 BDSA-2021-0730)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0730](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0730)([CVE-2021-21344](https://nvd.nist.gov/vuln/detail/CVE-2021-21344)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of JAXB 'Accessor$GetterSetterReflection' and 'com.sun.rowset.JdbcRowSetImpl' Types\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types.\n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2020-26258 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2020-26258 BDSA-2020-3787)"
                            },
                            "fullDescription": {
                                "text": "Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-3787](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3787)([CVE-2020-26258](https://nvd.nist.gov/vuln/detail/CVE-2020-26258)) - XStream Vulnerable to Information Disclosure via Server-Side Request Forgery through Unmarshalling of Specially Crafted Input\n\n\n## Solution\nFixed in [**1.4.15**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_15) by [this](https://github.com/x-stream/xstream/commit/6740c04b217aef02d44fba26402b35e0f6f493ce) commit.\n\n## Workaround\nFor users who do not use the [recommended](https://x-stream.github.io/security.html#framework) white listing approach of the security framework, the vendor has supplied a comprehensive workaround involving the blacklist approach [here](https://x-stream.github.io/CVE-2020-26258.html).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-918",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39151 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39151 BDSA-2021-2568)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2568](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2568)([CVE-2021-39151](https://nvd.nist.gov/vuln/detail/CVE-2021-39151)) - XStream Vulnerable to Remote Code Execution (RCE) via Unsafe 'KeyStoreResolver$KeyStoreIterator' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39153 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39153 BDSA-2021-2576)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2576](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2576)([CVE-2021-39153](https://nvd.nist.gov/vuln/detail/CVE-2021-39153)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'PackageWriter' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21347 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21347 BDSA-2021-0722)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0722](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0722)([CVE-2021-21347](https://nvd.nist.gov/vuln/detail/CVE-2021-21347)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of 'JavacProcessingEnvironment$NameProcessIterator' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21351 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21351 BDSA-2021-0721)"
                            },
                            "fullDescription": {
                                "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0721](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0721)([CVE-2021-21351](https://nvd.nist.gov/vuln/detail/CVE-2021-21351)) - Xstream Vulnerable to Remote Code Execution (RCE) via Input Stream Manipulation\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\n## Workaround\nOfficial workarounds for various versions are available [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39152 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39152 BDSA-2021-2587)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2587](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2587)([CVE-2021-39152](https://nvd.nist.gov/vuln/detail/CVE-2021-39152)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Unsafe Nashorn Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-918",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21349 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21349 BDSA-2021-0731)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0731)([CVE-2021-21349](https://nvd.nist.gov/vuln/detail/CVE-2021-21349)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Crafted Input Stream\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](https://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n\n",
                                "text": "XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-918",
                                    "external/cwe/cwe-184"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21350 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21350 BDSA-2021-0724)"
                            },
                            "fullDescription": {
                                "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0724](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0724)([CVE-2021-21350](https://nvd.nist.gov/vuln/detail/CVE-2021-21350)) - Xstream Vulnerable to Remote Code Execution (RCE) via Input Stream Containing 'PriorityQueue'\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\n## Workaround\nOfficial workarounds for various versions are available [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21345 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21345 BDSA-2021-0728)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0728](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0728)([CVE-2021-21345](https://nvd.nist.gov/vuln/detail/CVE-2021-21345)) - XStream Vulnerable to Arbitrary Command Execution via Deserialization of 'com.sun.corba.se.impl.activation.ServerTableEntry' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types.\n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-77](https://cwe.mitre.org/data/definitions/77.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-77",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39149 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39149 BDSA-2021-2565)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2565](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2565)([CVE-2021-39149](https://nvd.nist.gov/vuln/detail/CVE-2021-39149)) - XStream Vulnerable to Remote Code Execution (RCE) via Unsafe 'CompositeInvocationHandlerImpl' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-39150 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39150 BDSA-2021-2586)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2586](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2586)([CVE-2021-39150](https://nvd.nist.gov/vuln/detail/CVE-2021-39150)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Unsafe SEI Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-918",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21346 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21346 BDSA-2021-0726)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0726](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0726)([CVE-2021-21346](https://nvd.nist.gov/vuln/detail/CVE-2021-21346)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of 'sun.swing.SwingLazyValue' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-29505 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-29505 BDSA-2021-1626)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-1626](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1626)([CVE-2021-29505](https://nvd.nist.gov/vuln/detail/CVE-2021-29505)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of 'sun.jndi.toolkit.dir.LazySearchEnumerationImpl' Type\n\n\n## Solution\nFixed in [**1.4.17**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/24fac82191292c6ae25f94508d28b9823f83624f) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types.\n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2016-3674 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2016-3674 BDSA-2016-0027)"
                            },
                            "fullDescription": {
                                "text": "XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2016-0027](https://openhub.net/vulnerabilities/bdsa/BDSA-2016-0027)([CVE-2016-3674](https://nvd.nist.gov/vuln/detail/CVE-2016-3674)) - XStream Vulnerable to XML Entity Entity Expansion via Crafted Document Type Definition\n\n\n## Solution\nThis vulnerability is fixed in version [**1.4.9**](http://repo.maven.apache.org/maven2/com/thoughtworks/xstream/xstream/1.4.9/).\n\n**Note**: Applications using one of the following parser implementations are still vulnerable:\n* `DOM` implementation from Java 5 runtime and below\n* `StAX` implementation from Java 6 runtime and below\n* `StAX` implementation from BEA (old reference implementation)\n* `XOM`\n\nThe latest stable releases are available [here](https://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor has recommended [here](https://x-stream.github.io/CVE-2016-3674.html) that users can opt to use one of the XML Pull Parser implementations in order to mitigate this issue.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html)\n* Common Weakness Enumeration: [CWE-776](https://cwe.mitre.org/data/definitions/776.html)\n\n",
                                "text": "XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-611",
                                    "external/cwe/cwe-776"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21342 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21342 BDSA-2021-0736)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0736](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0736)([CVE-2021-21342](https://nvd.nist.gov/vuln/detail/CVE-2021-21342)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Deserialization of 'DataTransferer$IndexOrderComparator' and 'URLDataSource' Types\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-918",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "CVE-2021-21341 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21341 BDSA-2021-0737)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0737](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0737)([CVE-2021-21341](https://nvd.nist.gov/vuln/detail/CVE-2021-21341)) - XStream Vulnerable to Denial-of-Service (DoS) via Deserialization of 'java.io.ByteArrayInputStream' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-835",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-21343 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21343 BDSA-2021-0732)"
                            },
                            "fullDescription": {
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0732](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0732)([CVE-2021-21343](https://nvd.nist.gov/vuln/detail/CVE-2021-21343)) - XStream Vulnerable to Arbitrary File Deletion via Deserialization of 'DataTransferer$IndexOrderComparator' and 'java.io.FileInputStream' Types\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2024-8322 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (BDSA-2024-8322)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to a stack overflow issue when configured to use the `BinaryStreamDriver`. A remote attacker who can manipulate a binary input stream could cause a denial-of-service (DoS)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to a stack overflow issue when configured to use the `BinaryStreamDriver`. A remote attacker who can manipulate a binary input stream could cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2024-8322](https://openhub.net/vulnerabilities/bdsa/BDSA-2024-8322) - XStream Vulnerable to a Denial-of-Service (DoS) via Manipulated Binary Input Stream Causing Stack Overflow\n\n\n\n## Solution\nFixed in [**1.4.21**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_21) by [this](https://github.com/x-stream/xstream/commit/fdd9f7d3) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\n**The [Advisory](https://github.com/advisories/GHSA-hfq9-hggm-c56q) states the following workaround:**\n\n>The only solution is to catch the StackOverflowError in the client code calling XStream if XStream is configured to use the BinaryStreamDriver.\n\n**This workaround has not been independently verified by the [Black Duck CyRC](https://www.blackduck.com/resources/cybersecurity-research-center.html) Team.**\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to a stack overflow issue when configured to use the `BinaryStreamDriver`. A remote attacker who can manipulate a binary input stream could cause a denial-of-service (DoS)."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-41966 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2022-41966 BDSA-2022-3693)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-3693](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3693)([CVE-2022-41966](https://nvd.nist.gov/vuln/detail/CVE-2022-41966)) - XStream Vulnerable to Denial-of-Service (DoS) via Stack Overflow in Hash Processing Functionality\n\n\n## Solution\nFixed in version [**1.4.20**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_20) by [this](https://github.com/x-stream/xstream/commit/e9151f221b4969fb15b1e946d5d61dcdd459a391) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nThe vendor has stated [here](https://github.com/x-stream/xstream/security/advisories/GHSA-j563-grx4-pjpv) that the following workaround can be implemented:\n\n> The attack uses the hash code implementation for collections and maps to force recursive hash calculation causing a stack overflow. Following types of the Java runtime are affected:\n>\n> * java.util.HashMap\n> * java.util.HashSet\n> * java.util.Hashtable\n> * java.util.LinkedHashMap\n> * java.util.LinkedHashSet\n> Other third party collection implementations that use their element's hash code may also be affected\n> A simple solution is to catch the StackOverflowError in the client code calling XStream.\n> \n> If your object graph does not use referenced elements at all, you may simply set the NO_REFERENCE mode:\n> \n> XStream xstream = new XStream();\n> xstream.setMode(XStream.NO_REFERENCES);\n> If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:\n> \n> XStream xstream = new XStream();\n> xstream.denyTypes(new Class[]{\n>  java.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n> });\n> Unfortunately these types are very common. If you only use HashMap or HashSet and your XML refers these only as default map or set, you may additionally change the default implementation of java.util.Map and java.util.Set at unmarshalling time::\n> \n> xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n> xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n> However, this implies that your application does not care about the implementation of the map and all elements are comparable.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n* Common Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n",
                                "text": "XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-502",
                                    "external/cwe/cwe-674"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2022-40151 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2022-40151 BDSA-2022-2580)"
                            },
                            "fullDescription": {
                                "text": "XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2580](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2580)([CVE-2022-40151](https://nvd.nist.gov/vuln/detail/CVE-2022-40151)) - XStream Vulnerable to Denial-of-Service (DoS) via Stack Overflow during XML Data Serialization\n\n\n## Solution\nFixed in version [**1.4.20**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_20) by [this](https://github.com/x-stream/xstream/commit/e9151f221b4969fb15b1e946d5d61dcdd459a391) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n* Common Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n",
                                "text": "XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-121",
                                    "external/cwe/cwe-502",
                                    "external/cwe/cwe-674"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-39140 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-39140 BDSA-2021-2582)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2582](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2582)([CVE-2021-39140](https://nvd.nist.gov/vuln/detail/CVE-2021-39140)) - XStream Vulnerable to Denial of Service (DoS) via Incomplete Deserialization Blacklist of 'sun.reflect.annotation.AnnotationInvocationHandler' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n* Common Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n",
                                "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-184",
                                    "external/cwe/cwe-502",
                                    "external/cwe/cwe-835"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2017-7957 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2017-7957 BDSA-2017-0661)"
                            },
                            "fullDescription": {
                                "text": "A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nA flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2017-0661](https://openhub.net/vulnerabilities/bdsa/BDSA-2017-0661)([CVE-2017-7957](https://nvd.nist.gov/vuln/detail/CVE-2017-7957)) - XStream (De)Serialization Denial of Service\n\n\n## Solution\nUpgrade to version **1.4.10** or later.\n\n## Workaround\nXStream contains since version 1.4.7 a security framework to prevent an \nattack described in CVE-2013-7285. This framework can also be used to \nsuppress the current vulnerability by setting:\n\nxstream.denyTypes(void.class, Void.class);\n\nUsers of older XStream releases can register an own converter for the 'void' \ntype, that also protects against this attack:\n\nxstream.registerConverter(new Converter() {\n  public boolean canConvert(Class type) {\n    return Void.class == type || void.class == type;\n  }\n  public Object unmarshal(HierarchicalStreamReader reader, \nUnmarshallingContext context) {\n    throw new ConversionException(\"Type void cannot have an instance\");\n  }\n  public void marshal(Object source, HierarchicalStreamWriter writer, \nMarshallingContext context) {\n    throw new ConversionException(\"Type void cannot have an instance\");\n  }\n}, XStream.PRIORITY_VERY_HIGH);\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n",
                                "text": "A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-20"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-21348 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-21348 BDSA-2021-0735)"
                            },
                            "fullDescription": {
                                "text": "Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0735](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0735)([CVE-2021-21348](https://nvd.nist.gov/vuln/detail/CVE-2021-21348)) - Xstream Vulnerable to Regular Expression Denial-of-Service (ReDoS) via Crafted Input Stream\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](https://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html)\n\n",
                                "text": "Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400",
                                    "external/cwe/cwe-185"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2021-43859 xstream 1.4.5: com.thoughtworks.xstream",
                            "shortDescription": {
                                "text": "Direct Dependency: xstream 1.4.5 (CVE-2021-43859 BDSA-2022-0291)"
                            },
                            "fullDescription": {
                                "text": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.21  | 1.4.21 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0291](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0291)([CVE-2021-43859](https://nvd.nist.gov/vuln/detail/CVE-2021-43859)) - XStream Vulnerable to Denial-of-Service (DoS) via Object Injection\n\n\n## Solution\nFixed in [**1.4.19**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_19) by [this](https://github.com/x-stream/xstream/commit/e8e88621ba1c85ac3b8620337dd672e0c0c3a846) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nPer the Vendor [workaround](https://x-stream.github.io/CVE-2021-43859.html):\n\n> If your object graph does not use referenced elements at all, you may simply set the NO_REFERENCE mode:\n> ```\n> XStream xstream = new XStream();\n> xstream.setMode(XStream.NO_REFERENCES);\n> ```\n> If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:\n> ```\n> XStream xstream = new XStream();\n> xstream.denyTypes(new Class[]{\n> \tjava.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n> });\n> ```\n> \n> Unfortunately these types are very common. If you only use HashMap or HashSet and your XML refers these only as default map or set, you may additionally change the default implementation of java.util.Map and java.util.Set at unmarshalling time:\n> \n> ```\n> xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n> xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n> ```\n> However, this implies that your application does not care about the implementation of the map and all elements are comparable.\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n* Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n",
                                "text": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-400",
                                    "external/cwe/cwe-502"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "CVE-2009-4123 dirgra 0.5: asciidoctorj 3.0.0: org.jruby",
                            "shortDescription": {
                                "text": "Transitive Dependency: dirgra 0.5 from asciidoctorj 3.0.0 (CVE-2009-4123)"
                            },
                            "fullDescription": {
                                "text": "The jruby-openssl gem before 0.6 for JRuby mishandles SSL certificate validation."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| asciidoctorj 3.0.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| dirgra 0.5  | 0.6  | 0.6 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=c83d0681-52a5-4e75-aa69-22d5adae2df9)\n\n\n## Description\nThe jruby-openssl gem before 0.6 for JRuby mishandles SSL certificate validation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2009-4123](https://openhub.net/vulnerabilities/bdsa/CVE-2009-4123) - \n\n\n\n\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat:2025.4-SNAPSHOT:-maven\n    - org.asciidoctor:asciidoctorj:3.0.0\n        - org.jruby:jruby:10.0.0.1\n            - org.jruby:jruby-base:10.0.0.1\n                - org.jruby:dirgra:0.5\n\n\n## References\n* Common Weakness Enumeration: [CWE-295](https://cwe.mitre.org/data/definitions/295.html)\n\n",
                                "text": "The jruby-openssl gem before 0.6 for JRuby mishandles SSL certificate validation."
                            },
                            "properties": {
                                "security-severity": "8.9",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-295"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            }
                        },
                        {
                            "id": "BDSA-2025-6849 nimbus-jose-jwt 9.37.3: spring-boot-starter-oauth2-client 3.5.5: com.nimbusds",
                            "shortDescription": {
                                "text": "Transitive Dependency: nimbus-jose-jwt 9.37.3 from spring-boot-starter-oauth2-client 3.5.5 (BDSA-2025-6849)"
                            },
                            "fullDescription": {
                                "text": "Connect2id Nimbus JOSE + JWT is vulnerable to an uncontrolled recursion issue. An attacker could exploit this by supplying a deeply nested JSON object in a JWT claim set in order to trigger a `StackOverflowError` error, resulting in a denial-of-service (DoS)."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-oauth2-client 3.5.5  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| nimbus-jose-jwt 9.37.3  | 9.48  | 10.4.2 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=b6974500-2e0d-4213-896a-a66d359ba85e)\n\n\n## Description\nConnect2id Nimbus JOSE + JWT is vulnerable to an uncontrolled recursion issue. An attacker could exploit this by supplying a deeply nested JSON object in a JWT claim set in order to trigger a `StackOverflowError` error, resulting in a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2025-6849](https://openhub.net/vulnerabilities/bdsa/BDSA-2025-6849) - Connect2id Nimbus JOSE + JWT  Vulnerable to Denial-of-Service (DoS) via Deeply Nested JSON object\n\n\n\n## Solution\nFixed in version [**10.0.2**](https://bitbucket.org/connect2id/nimbus-jose-jwt/src/10.0.2/) by [this](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/393a96f) commit.\n\nThe latest stable releases are available [here](https://connect2id.com/products/nimbus-jose-jwt/download).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat:2025.4-SNAPSHOT:-maven\n    - org.springframework.boot:spring-boot-starter-oauth2-client:3.5.5\n        - org.springframework.security:spring-security-oauth2-jose:6.5.3\n            - com.nimbusds:nimbus-jose-jwt:9.37.3\n\n\n## References\n* Common Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n",
                                "text": "Connect2id Nimbus JOSE + JWT is vulnerable to an uncontrolled recursion issue. An attacker could exploit this by supplying a deeply nested JSON object in a JWT claim set in order to trigger a `StackOverflowError` error, resulting in a denial-of-service (DoS)."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "transitive_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-674"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        },
                        {
                            "id": "BDSA-2025-6881 commons-lang3 3.14.0: org.apache.commons",
                            "shortDescription": {
                                "text": "Direct Dependency: commons-lang3 3.14.0 (BDSA-2025-6881)"
                            },
                            "fullDescription": {
                                "text": "Apache Commons Lang is affected by an uncontrolled recursion vulnerability in the `ClassUtils.getClass` method. A remote attacker could exploit this flaw by providing excessively long or deeply nested input strings, leading to a StackOverflowError and resulting in a denial-of-service (DoS) condition."
                            },
                            "help": {
                                "markdown": "\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| commons-lang3 3.14.0  | 3.18.0  | 3.18.0 |\n\n\n[Click Here To See More Details in Black Duck](https://saastest.app.blackduck.com//api/projects/b2968d43-ce33-40ca-b103-98de8cf21705/versions/1cb252fd-935a-409f-aee7-631e80da2f13/vulnerability-bom?selectedComponent=bd157106-3588-4b01-936a-3e8accbcdefc)\n\n\n## Description\nApache Commons Lang is affected by an uncontrolled recursion vulnerability in the `ClassUtils.getClass` method. A remote attacker could exploit this flaw by providing excessively long or deeply nested input strings, leading to a StackOverflowError and resulting in a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2025-6881](https://openhub.net/vulnerabilities/bdsa/BDSA-2025-6881) - Apache Commons Lang Vulnerable to Denial-of-Service (DoS) via Uncontrolled Recursion leading to Stack Overflow in 'ClassUtils.getClass' Method\n\n\n\n## Solution\nFixed in version [**3.18.0-RC1**](https://github.com/apache/commons-lang/releases/tag/commons-lang-3.18.0-RC1) by [this](https://github.com/apache/commons-lang/commit/b424803abdb2bec818e4fbcb251ce031c22aca53) commit.\n\nThe latest stable releases can be found [here](https://github.com/apache/commons-lang/tags).\n\n\n\n\n\n## References\n* Common Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n",
                                "text": "Apache Commons Lang is affected by an uncontrolled recursion vulnerability in the `ClassUtils.getClass` method. A remote attacker could exploit this flaw by providing excessively long or deeply nested input strings, leading to a StackOverflowError and resulting in a denial-of-service (DoS) condition."
                            },
                            "properties": {
                                "security-severity": "6.8",
                                "tags": [
                                    "security",
                                    "open_source_analysis",
                                    "direct_dependency",
                                    "patch_available",
                                    "external/cwe/cwe-674"
                                ]
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            }
                        }
                    ]
                }
            },
            "results": [
                {
                    "message": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2013-7285 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "29da7bc2f1c8ab3e848f57dc45e22afd4566c4b50f580530703e4f50b57eff65"
                    }
                },
                {
                    "message": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2020-26217 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4663056e0a7b9a21c57f66042a86559fccbcf3fe0f1f1b60161a23083d84ee0c"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39148 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "3decc3aa2957843a6bf58069d34a1170ae7d35199da2d52225b35ffb31dfaaf3"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39145 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "45626238ac2ff403214b79532de44f551c8de8fc5c470ebc30a8762334a049de"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39147 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9637923f87c7c59ecbcd925131dfd4886362e934e2f311fadd07509129f1cbeb"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39139 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b324af0aab9a661f9866fed18a67a9be394e9cd07063ada646c8130303b7368a"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39144 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4c3bb4f0654b6de7b6052c2665f72abcaf21c7aa73ec892a657fa2d843f6800b"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39146 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e9d170b2d73eba06aa449621c8ef8660e4027e1ec268a431138515b05923303e"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39154 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "badf05b29ea744d4bb05f0aeddb9933d0890eae6d2a3d73a930be82bd1351c02"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39141 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "4a4a8a819d37af35fbca1b0a6b18723e49c780b6d650d3cec4009d8ddb70aa46"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2020-26259 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "bb3c71806c6f00b7cb9512663d886047d25e5efab4ba77e6dbbbd66d35e4256c"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21344 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9b0114520ef88b9020b894093f4aa70cd01ccff0e4e35b96caefe2db72d836d9"
                    }
                },
                {
                    "message": {
                        "text": "Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2020-26258 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "119867b7f9a24595cf5a9e3e4438a0f147e2bc5cd6cf9181951a84ef7c0849a4"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39151 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "ecce3682480f91c71522838da604fab37de76fc89719aa339ba527a7e1545901"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39153 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a8339c0ffbe74971f395e984ed0dbe51d6967794f18735c8154c3634b8b51e72"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21347 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b07bab18602f4c4372be70978fd04b2b32169b94152bb1172ee9f6c79b0bf0c6"
                    }
                },
                {
                    "message": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21351 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "17e10f0e6f27755daf05947b06f5831e91036cf22075215789da6b18013b2661"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39152 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e30f45c5fdb5a340083bbf3a7b29a07f60d58c6fbe25f1a3d665791645027072"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21349 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cbc2edc62397ee2e019c5eacd09139fa8f2356e62f94c46845964756e941b3f1"
                    }
                },
                {
                    "message": {
                        "text": "Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21350 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "654c1f29f74867d58b041b81c2beb17664a828550ca5cb1c9c9f10a414ca72b1"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21345 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "0b6b401eb8985415bfe1f9eb909e6f0f20ca0dc529d7fb5c133a3a40b292569c"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39149 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "612eb0c9ed3b607c1fce71e8065d9839e01436b95b51294884ad19c6e967adfc"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39150 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "f27e7b2e864086e3c7706c00526a58aae8827330467b3f2311b9f9893ba836c5"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21346 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d7d85e07e541c3214ecb8f20c315689e37051279afd737ff60382ea530309aa2"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-29505 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "e51fed70323681fcba04ac87b757f7fc771e1edbcce781d78f874ba60ed7f0ae"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2016-3674 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "9fe379bbea6219c565f499d8591d0c6886b99591902eb8dc37268940cdedd0d9"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21342 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "1cb6a59f50a3532b6236aa00806fc0e62d3b35acd558aebb12077334e34131f3"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21341 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "d909642d4c46fda4f2bcefdbd4da3b8e4a305b9a5eee369693786323691b35de"
                    }
                },
                {
                    "message": {
                        "text": "XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21343 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "480156638a4fe4ded0a4b4a2bac91928dedbea7d50d19f836cd2f5970c7524e4"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to a stack overflow issue when configured to use the `BinaryStreamDriver`. A remote attacker who can manipulate a binary input stream could cause a denial-of-service (DoS)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2024-8322 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "c6736deedc34b45ff1ac42ee74716ff5f7a2e1d2508cfd7f579ba5a4088bf00d"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-41966 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "99477689e797767ed7b37fec984b9348e4a387bed1fddf7d04651c45d7a10288"
                    }
                },
                {
                    "message": {
                        "text": "XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2022-40151 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "8f2254e92c049bc4fd3b7d869aaecc4516c4658f2cfd8805e36f2df175745496"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-39140 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "02e1eb03016ebbad8126c633a1e3dd4d20f8ea2409e25339603c915ebf4d283c"
                    }
                },
                {
                    "message": {
                        "text": "A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2017-7957 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "fff22a039ab903007752c8ebb17f6fba2dd249bc1f3ad87298d4a07f5b9501e5"
                    }
                },
                {
                    "message": {
                        "text": "Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-21348 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "87b26aeee683e4ef25a3d2411f6668a39aa7113bf6f100ad85f6ac4da0a1d9be"
                    }
                },
                {
                    "message": {
                        "text": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 108
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2021-43859 xstream 1.4.5: com.thoughtworks.xstream",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "aa47f04da0549679e4bc249878a617392d5fbe0e602e868858f713a54248ec6d"
                    }
                },
                {
                    "message": {
                        "text": "The jruby-openssl gem before 0.6 for JRuby mishandles SSL certificate validation."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "pom.xml"
                                },
                                "region": {
                                    "startLine": 65
                                }
                            }
                        }
                    ],
                    "ruleId": "CVE-2009-4123 dirgra 0.5: asciidoctorj 3.0.0: org.jruby",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "a8b8af90f160e72ff63f27d57e533e57df21434c09f13a6bafbdb785498df976"
                    }
                },
                {
                    "message": {
                        "text": "Connect2id Nimbus JOSE + JWT is vulnerable to an uncontrolled recursion issue. An attacker could exploit this by supplying a deeply nested JSON object in a JWT claim set in order to trigger a `StackOverflowError` error, resulting in a denial-of-service (DoS)."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2025-6849 nimbus-jose-jwt 9.37.3: spring-boot-starter-oauth2-client 3.5.5: com.nimbusds",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "b933ea0630cd2ad0160da9d5f33f43f8ef368436de75c7d2e1570de96b2cfb0a"
                    }
                },
                {
                    "message": {
                        "text": "Apache Commons Lang is affected by an uncontrolled recursion vulnerability in the `ClassUtils.getClass` method. A remote attacker could exploit this flaw by providing excessively long or deeply nested input strings, leading to a StackOverflowError and resulting in a denial-of-service (DoS) condition."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file://unknown-file"
                                },
                                "region": {
                                    "startLine": 1
                                }
                            }
                        }
                    ],
                    "ruleId": "BDSA-2025-6881 commons-lang3 3.14.0: org.apache.commons",
                    "partialFingerprints": {
                        "ruleIdLocationHash/v1": "cc96441824e40906de6e3c895a8e13b6ef4913ffd7c983604ae578e1933e4abb"
                    }
                }
            ]
        }
    ],
    "version": "2.1.0"
}